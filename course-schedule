class Solution {
    public boolean canFinish(int n, int[][] p) {
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>(n);
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<Integer>());
        }
        for(int i=0;i<p.length;i++){
            adj.get(p[i][1]).add(p[i][0]);
        }
        boolean[] visited = new boolean[n]; 
        boolean[] recStack = new boolean[n]; 
        for (int i = 0; i < n; i++) 
            if (isCyclicUtil(i, visited, recStack,adj)) 
                return false; 
  
        return true;
    }
    private boolean isCyclicUtil(int v, boolean[] visited,boolean[] recStack,ArrayList<ArrayList<Integer>> adj) {
        if (recStack[v]) 
            return true; 
        if (!visited[v]) {
            visited[v] = true; 
            recStack[v] = true;
            for (Integer i: adj.get(v)) 
                if (isCyclicUtil(i, visited, recStack,adj)) 
                    return true; 
        }
        recStack[v] = false; 
        return false; 
    } 
}
